import Mathlib
import WhitneyGraustein.calculus


open Set Function Complex Real Order

open Topology NormedSpace

open Mathlib



noncomputable section

structure CircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : Prop where
  diff : ContDiff ‚Ñù ‚ä§ Œ≥
  per : Periodic Œ≥ 1
  derive_ne : ‚àÄ t, deriv Œ≥ t ‚â† 0

/- If extra time, prove existence of lift and convert axioms to defs/lemmas -/

/-
structure CircleImmersion.lift (Œ∏ : ‚Ñù ‚Üí ‚Ñù) : Prop where
  Œ∏ : ‚Ñù ‚Üí ‚Ñù ???
  diff : ContDiff ‚Ñù ‚ä§ Œ∏
  expr : ‚àÄ t, (deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * exp (I * Œ∏ t))
-/

def CircleImmersion.lift {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥) : ‚Ñù ‚Üí ‚Ñù := sorry

lemma lift_exists {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥) :
  ‚àÉ Œ∏ : ‚Ñù ‚Üí ‚Ñù, (Œ∏ = CircleImmersion.lift imm_Œ≥) ‚àß (ContDiff ‚Ñù ‚ä§ Œ∏) ‚àß (‚àÄ (t : ‚Ñù), (deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * exp (I * Œ∏ t))) := sorry

-- Lift unique?


variable {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥)

axiom CircleImmersion.contDiff_lift : ContDiff ‚Ñù ‚ä§ imm_Œ≥.lift

axiom CircleImmersion.deriv_eq (t : ‚Ñù) : deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * Complex.exp (I * imm_Œ≥.lift t)

noncomputable def CircleImmersion.turningNumber := (imm_Œ≥.lift 1 - imm_Œ≥.lift 0) / (2 * œÄ)

structure HtpyCircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ) : Prop where
  diff : ContDiff ‚Ñù ‚ä§ (uncurry Œ≥)
  imm : ‚àÄ s, CircleImmersion (Œ≥ s)


/-
‚àÄK‚ÇÅ, K‚ÇÇ, K‚ÇÉ : ‚Ñù, with K‚ÇÅ > 0, and ‚àÄH > 0, we claim that  there exists some N‚ÇÄ such that N ‚â• N‚ÇÄ
implies that K‚ÇÅHN - K‚ÇÇH - K‚ÇÉ > 0

This is required to construct our gamma function and for the main phase.
-/

lemma root_lemma_maybe (K‚ÇÅ : ‚Ñù) (K‚ÇÇ : ‚Ñù) (K‚ÇÉ : ‚Ñù) (K‚ÇÅ_pos : K‚ÇÅ > 0) (H_pos : H > 0) : ‚àÉ (N‚ÇÄ : ‚Ñï), ‚àÄ N > N‚ÇÄ, (K‚ÇÅ * H) * N - (K‚ÇÇ * H + K‚ÇÉ) > 0 := by
  let K‚ÇÅH_pos := Real.mul_pos K‚ÇÅ_pos H_pos
  /- Claim that N‚ÇÄ = max (‚åä(K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1‚åã) (0)

  Note that:
  N‚ÇÄ > (K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H)
  ‚Üî K‚ÇÅ*HN > K‚ÇÉ + K‚ÇÇ * H
  ‚Üî  K‚ÇÅ*HN - K‚ÇÇ * H -  K‚ÇÉ > 0
  -/
  let N‚ÇÄ := Nat.floor (max ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) (0) )
  use N‚ÇÄ
  intro N hN

  have apply_floor_lt :=
    (Nat.floor_lt (le_max_right ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) 0)).1 (gt_iff_lt.1 hN)

  have context: (K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1 ‚â§ max ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) 0 := by
    exact le_max_left ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) 0

  have final: (K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) < N := by linarith
  have final2: (K‚ÇÉ + K‚ÇÇ * H) < (K‚ÇÅ * H) * N  := by exact (div_lt_iff' K‚ÇÅH_pos).mp final
  linarith

namespace WhitneyGraustein

@[reducible] def unit : Set ‚Ñù := Set.Icc 0 1
@[reducible] def ruffling : Set ‚Ñù := Set.Icc 0 (1/4:‚Ñù)
@[reducible] def unruffling : Set ‚Ñù := Set.Icc (3/4:‚Ñù) 1
@[reducible] def main : Set ‚Ñù := Set.Icc (1/4:‚Ñù) (3/4:‚Ñù)
@[reducible] def antimain : Set ‚Ñù := (Set.Iic 0) ‚à™ (Set.Ici 1)

lemma ruffling_closed : IsClosed (Set.Icc 0 (1/4:‚Ñù)) := isClosed_Icc
lemma unruffling_closed : IsClosed (Set.Icc (3/4:‚Ñù) 1) := isClosed_Icc
lemma main_closed : IsClosed (Set.Icc (1/4:‚Ñù) (3/4:‚Ñù)) := isClosed_Icc

lemma ruffling_unruffling_disjoint : Disjoint ruffling unruffling := by
  intro S hS hS'
  by_contra opp
  push_neg at opp

  rcases (not_forall_not.mp opp) with ‚ü®x,hx‚ü©
  specialize hS hx
  specialize hS' hx
  rcases hS with ‚ü®_,B‚ü©
  rcases hS' with ‚ü®C,_‚ü©
  have fact : (1/4:‚Ñù) < (3/4:‚Ñù) := by norm_num
  have fact2 : x < (3/4:‚Ñù)  := LE.le.trans_lt B fact
  linarith

lemma main_antimain_disjoint : Disjoint main antimain := by
  intro S hS hS'
  by_contra opp
  push_neg at opp

  rcases (not_forall_not.mp opp) with ‚ü®x,hx‚ü©
  specialize hS hx
  specialize hS' hx
  rcases hS with ‚ü®A,B‚ü©
  rcases hS' with C|D

  simp at C
  linarith
  simp at D
  linarith

lemma triangle' {A B : ‚ÑÇ} : ‚ÄñB‚Äñ ‚â§ ‚ÄñA + B‚Äñ + ‚ÄñA‚Äñ := by
  have fact := norm_add_le (A+B) (-A)
  simp at fact
  exact fact

lemma triangle {A B : ‚ÑÇ} : ‚ÄñB‚Äñ - ‚ÄñA‚Äñ ‚â§ ‚ÄñA + B‚Äñ :=
  tsub_le_iff_right.mpr triangle'

lemma in_particular {A B C : ‚ÑÇ} : ‚ÄñC‚Äñ - ‚ÄñB‚Äñ - ‚ÄñA‚Äñ ‚â§ ‚ÄñA + B + C‚Äñ :=
  calc
    ‚ÄñC‚Äñ - ‚ÄñB‚Äñ - ‚ÄñA‚Äñ ‚â§ ‚ÄñB + C‚Äñ - ‚ÄñA‚Äñ := sub_le_sub_right triangle ‚ÄñA‚Äñ
    _ ‚â§ ‚ÄñA + (B + C)‚Äñ := triangle
    _ = ‚ÄñA + B + C‚Äñ := congrArg Norm.norm (add_assoc A B C).symm


def h : ‚Ñù ‚Üí ‚Ñù := sorry

lemma h_diff : ContDiff ‚Ñù ‚ä§ h  := sorry

lemma h_main : ‚àÄ·∂† (x : ‚Ñù) in ùìùÀ¢ main, h x = 0 := sorry

lemma h_antimain : ‚àÄ·∂† (x : ‚Ñù) in ùìùÀ¢ antimain, h x = H := sorry

lemma h_mem : ‚àÄ (x : ‚Ñù), h x ‚àà Icc 0 1 := sorry

@[simp] lemma h_zero : h 0 = 0 := sorry

@[simp] lemma h_one : h 1 = 0 := sorry


def ruffle : ‚Ñù ‚Üí ‚ÑÇ := fun t ‚Ü¶ ‚ü®-Real.sin (4 * œÄ * t), 2 * Real.sin (2 * œÄ * t)‚ü©

lemma ruffle_diff : ContDiff ‚Ñù ‚ä§ ruffle := by sorry /-TODO!!!!!!!!!!!!!!!-/


def R : ‚Ñù ‚Üí ‚ÑÇ := fun Œ∏ ‚Ü¶ cexp (Œ∏ ‚Ä¢ I)

lemma R_diff : ContDiff ‚Ñù ‚ä§ R := by sorry /-TODO!!!!!!!!!!!!!!-/

-- See https://github.com/leanprover-community/sphere-eversion/blob/master/SphereEversion/ToMathlib/Analysis/CutOff.lean
def œÅ : ‚Ñù ‚Üí ‚Ñù := sorry

lemma œÅ_diff : ContDiff ‚Ñù ‚ä§ œÅ := sorry

lemma œÅ_ruffling : EqOn œÅ 0 ruffling := sorry

lemma œÅ_unruffling : EqOn œÅ 1 unruffling := sorry

lemma œÅ_mem : ‚àÄ x, œÅ x ‚àà Icc (0 : ‚Ñù) 1 := sorry

@[simp] lemma rho_zero : œÅ 0 = 0 := sorry

@[simp] lemma rho_one : œÅ 1 = 1 := sorry


theorem whitney_graustein {Œ≥‚ÇÄ Œ≥‚ÇÅ : ‚Ñù ‚Üí ‚ÑÇ} {t : ‚Ñù} (imm_Œ≥‚ÇÄ : CircleImmersion Œ≥‚ÇÄ) (imm_Œ≥‚ÇÅ : CircleImmersion Œ≥‚ÇÅ):
  (imm_Œ≥‚ÇÄ.turningNumber = imm_Œ≥‚ÇÅ.turningNumber) ‚Üí ‚àÉ (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ), HtpyCircleImmersion Œ≥ ‚àß ((‚àÄ t, Œ≥ 0 t = Œ≥‚ÇÄ t) ‚àß (‚àÄ t, Œ≥ 1 t = Œ≥‚ÇÅ t)) := by
  intro hyp --we want to show that since there exists some N,H pair such that... then there exists...

  let H : ‚Ñù := 1
  have H_pos : 0 < H := Real.zero_lt_one

  rcases (lift_exists imm_Œ≥‚ÇÄ) with ‚ü®(Œ∏‚ÇÄ : ‚Ñù ‚Üí ‚Ñù), hŒ∏‚ÇÄ_lift_is_lift, hŒ∏‚ÇÄ_diff, hŒ∏‚ÇÄ_decomp‚ü©
  rcases (lift_exists imm_Œ≥‚ÇÅ) with ‚ü®(Œ∏‚ÇÅ : ‚Ñù ‚Üí ‚Ñù), hŒ∏‚ÇÅ_lift_is_lift, hŒ∏‚ÇÅ_diff, hŒ∏‚ÇÅ_decomp‚ü©

  have fact {A : ‚ÑÇ} : 0 = A + (-A) := by norm_num

  -- have critical : ‚àÄ K‚ÇÅ > 0, ‚àÄ H > 0, ‚àÄ N > N‚ÇÄ, ‚àÄ s, ‚àÄ t, ‚Äñderiv (Œ≥ s) t‚Äñ ‚â• (K‚ÇÅ s) * N * H - (K‚ÇÇ s) * H - (K‚ÇÉ s)
  -- fix Œ≥‚ÇÄ, Œ≥‚ÇÅ, and œÅ
  -- ‚àÄ H > 0, ‚àÉ N‚ÇÄ, ‚àÄ N ‚â• N‚ÇÄ, K‚ÇÅ * N * H - K‚ÇÇ * H - K‚ÇÉ > 0

  let œù  := fun s t ‚Ü¶ (1 - (œÅ s)) ‚Ä¢ (Œ≥‚ÇÄ t) + (œÅ s) ‚Ä¢ Œ≥‚ÇÅ t
  let Œ∏  := fun s t ‚Ü¶ (1 - (œÅ s)) * (Œ∏‚ÇÄ t) + (œÅ s) * (Œ∏‚ÇÅ t)



  let unit_compact : IsCompact unit := isCompact_Icc
  let unit_nonempty : Set.Nonempty unit := nonempty_of_nonempty_subtype

  let A := fun s t ‚Ü¶ deriv (œù s) t
  let normA := fun s t ‚Ü¶ ‚ÄñA s t‚Äñ


  have œù_diff : ContDiff ‚Ñù ‚ä§ (uncurry œù) := by
    apply ContDiff.add
    apply ContDiff.smul
    apply ContDiff.sub
    exact contDiff_const
    exact œÅ_diff.comp contDiff_fst
    exact imm_Œ≥‚ÇÄ.diff.comp contDiff_snd
    apply ContDiff.smul
    exact œÅ_diff.comp contDiff_fst
    exact imm_Œ≥‚ÇÅ.diff.comp contDiff_snd

  have cont : Continuous (uncurry normA) := by
    exact (ContDiff.continuous_partial_snd (œù_diff) (OrderTop.le_top (1:‚Ñï‚àû))).norm


  rcases (unit_compact.prod unit_compact).exists_isMaxOn (unit_nonempty.prod unit_nonempty) cont.continuousOn with
    ‚ü®‚ü®s‚ÇÉ, t‚ÇÉ‚ü©, ‚ü®s‚ÇÉin : s‚ÇÉ ‚àà unit, t‚ÇÉin : t‚ÇÉ ‚àà unit‚ü©, hst‚ÇÉ‚ü©
  let K‚ÇÉ := normA s‚ÇÉ t‚ÇÉ

  let B := fun s t ‚Ü¶ (deriv (Œ∏ s) t) ‚Ä¢ (R ((Œ∏ s t) + œÄ / 2) * ruffle t) --NOTICE H IS NOT INCLUDED IN THIS STATEMENT.
  let normB := fun s t ‚Ü¶ ‚ÄñB s t‚Äñ

  have Œ∏_diff : ContDiff ‚Ñù ‚ä§ (uncurry Œ∏) := by
    apply ContDiff.add
    apply ContDiff.smul
    apply ContDiff.sub
    exact contDiff_const
    exact œÅ_diff.comp contDiff_fst
    exact hŒ∏‚ÇÄ_diff.comp contDiff_snd
    apply ContDiff.smul
    exact œÅ_diff.comp contDiff_fst
    exact hŒ∏‚ÇÅ_diff.comp contDiff_snd


  have cont : Continuous (uncurry normB) := by
    have c1 := (ContDiff.continuous_partial_snd (Œ∏_diff) (OrderTop.le_top (1:‚Ñï‚àû)))
    have c2 : Continuous (fun (x:(‚Ñù√ó‚Ñù)) ‚Ü¶ R ((Œ∏ x.1 x.2) + œÄ / 2) * ruffle x.2) := by
      apply Continuous.mul
      apply Continuous.comp
      exact Complex.continuous_exp
      apply Continuous.smul
      apply Continuous.add
      exact ContDiff.continuous Œ∏_diff
      exact continuous_const
      exact continuous_const

      have duh : (fun (x:‚Ñù√ó‚Ñù) ‚Ü¶ ruffle x.2) = (fun x ‚Ü¶ -Real.sin (4 * œÄ * x.2)+ (2 * Real.sin (2 * œÄ * x.2))‚Ä¢I) := by
        ext x
        unfold ruffle
        dsimp
        simp
        unfold ruffle
        dsimp
        simp
      rw [duh]
      apply Continuous.add
      apply Continuous.neg
      apply Continuous.comp'
      exact continuous_ofReal
      apply Continuous.comp
      exact continuous_re
      apply Continuous.comp'
      exact Complex.continuous_sin
      apply Continuous.comp'
      exact continuous_ofReal
      apply Continuous.comp
      exact continuous_mul_left (4 * œÄ)
      exact continuous_snd

      apply Continuous.smul
      apply Continuous.comp
      exact continuous_mul_left (2)
      apply Continuous.comp
      exact continuous_re
      apply Continuous.comp'
      exact Complex.continuous_sin
      apply Continuous.comp'
      exact continuous_ofReal
      apply Continuous.comp
      exact continuous_mul_left (2*œÄ)
      exact continuous_snd

      exact continuous_const

    exact (Continuous.smul c1 c2).norm



  rcases (unit_compact.prod unit_compact).exists_isMaxOn (unit_nonempty.prod unit_nonempty) cont.continuousOn with
    ‚ü®‚ü®s‚ÇÇ, t‚ÇÇ‚ü©, ‚ü®s‚ÇÇin : s‚ÇÇ ‚àà unit, t‚ÇÇin : t‚ÇÇ ‚àà unit‚ü©, hst‚ÇÇ‚ü©
  let K‚ÇÇ := normB s‚ÇÇ t‚ÇÇ

  let C := fun s t ‚Ü¶ (2 * œÄ) ‚Ä¢ (deriv ruffle t * R (Œ∏ s t)) --NOTICE NEITHER H NOR N IS INCLUDED IN THIS STATEMENT.
  let normC := fun s t ‚Ü¶ ‚ÄñC s t‚Äñ

  have cont : Continuous (uncurry normC) := by
    have c1 := ((contDiff_top_iff_deriv.1 (ruffle_diff)).2).continuous

    have c2 : Continuous (uncurry Œ∏) := Œ∏_diff.continuous

    have c3 : Continuous (fun (x:(‚Ñù√ó‚Ñù)) ‚Ü¶ (2 * œÄ) ‚Ä¢ (deriv ruffle x.2 * R (Œ∏ x.1 x.2))) := by
      apply Continuous.smul
      exact continuous_const
      apply Continuous.mul
      apply Continuous.comp'
      exact c1
      exact continuous_snd
      apply Continuous.comp
      exact Complex.continuous_exp
      apply Continuous.smul
      exact c2
      exact continuous_const

    exact c3.norm


  rcases (unit_compact.prod unit_compact).exists_isMinOn (unit_nonempty.prod unit_nonempty) cont.continuousOn with
    ‚ü®‚ü®s‚ÇÅ, t‚ÇÅ‚ü©, ‚ü®s‚ÇÅin : s‚ÇÅ ‚àà unit, t‚ÇÅin : t‚ÇÅ ‚àà unit‚ü©, hst‚ÇÅ‚ü©
  let K‚ÇÅ := normC s‚ÇÅ t‚ÇÅ

  have K‚ÇÅ_pos : K‚ÇÅ > 0 := by
    sorry

  rcases (root_lemma_maybe K‚ÇÅ K‚ÇÇ K‚ÇÉ K‚ÇÅ_pos H_pos) with ‚ü®N‚ÇÄ, hN‚ÇÄ‚ü©

  --Prove K‚ÇÅ is positive and do the same for H (or set H = 1), get N‚ÇÄ, then N

  let Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ := fun s t ‚Ü¶ œù s t + (h s) ‚Ä¢ (R (Œ∏ s t) * ruffle ((N‚ÇÄ+1) * t))
  use Œ≥
  constructor
  --these statements will likely need to be proved out of order, probably starting with the statement of derive_ne
  ¬∑ sorry
  --HtpyCircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ)
    --requires diff : ContDiff ‚Ñù ‚ä§ (uncurry Œ≥)
      --should fall out of some composition stuff
    -- requires imm : ‚àÄ s, CircleImmersion (Œ≥ s)
      --requires diff : ContDiff ‚Ñù ‚ä§ (Œ≥ s)
      --requires per : Periodic (Œ≥ s) 1
        --requires ‚àÄ t, (Œ≥ s) (t + 1) = (Œ≥ s) t
          --(œù s) := fun t ‚Ü¶ t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
          --(Œ∏ s) := t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
          --(Œ≥ s) := fun t ‚Ü¶ (œù s) t + (h s) * (R ((Œ∏ s) t)) * ruffling (N * t)
          --       = fun t ‚Ü¶ (fun t ‚Ü¶ t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t) t + (h s) * (R ((t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t) t)) * ruffle (N * t)
          --       = ...
      --requires derive_ne : ‚àÄ t, deriv Œ≥ t ‚â† 0
        --big thing here
        --for a given s, K‚ÇÅ = min of the norm of the thing with h and N in it
          --exists cuz norm has clear lower bound 0, show that this in particular is nonzero because the terms are nonnegative and are never simultaneously zero
        --for a given s, K‚ÇÇ = max(‚Äñh * deriv (Œ∏ s) * R * ruffle‚Äñ) on s, t ‚àà [0, 1]
          --exists since everything is bounded
        --for a given s, K‚ÇÉ = max(‚Äñ(1 - œÅ s) * (Œ≥‚ÇÄ t) + (œÅ s) * (Œ≥‚ÇÅ t)‚Äñ) on s, t ‚àà [0, 1]
          --exists since (œÅ s) and Œ≥‚ÇÄ and Œ≥‚ÇÅ are all bounded on the period, etc or whatever
        --using root_lemma_maybe (or whatever it renamed to), get N‚ÇÄ and define Œ≥, carry out some triangle inequality argument showing that ‚àÄ s, ‚Äñderiv (Œ≥ s) t‚Äñ > 0, and hence nonzero.
  ¬∑ constructor
    ¬∑ intro t
      calc
      Œ≥ 0 t = Œ≥‚ÇÄ t := simp [Œ≥, œù]
    ¬∑ intro t
      calc
      Œ≥ 1 t = Œ≥‚ÇÅ t := simp [Œ≥, œù]

end WhitneyGraustein
