import Mathlib

open Set Function Complex Real Order

open Topology NormedSpace

open Mathlib


structure CircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚ÑÇ) : Prop where
  diff : ContDiff ‚Ñù ‚ä§ Œ≥
  per : Periodic Œ≥ 1
  derive_ne : ‚àÄ t, deriv Œ≥ t ‚â† 0

/- If extra time, prove existence of lift and convert axioms to defs/lemmas -/

/-
structure CircleImmersion.lift (Œ∏ : ‚Ñù ‚Üí ‚Ñù) : Prop where
  Œ∏ : ‚Ñù ‚Üí ‚Ñù ???
  diff : ContDiff ‚Ñù ‚ä§ Œ∏
  expr : ‚àÄ t, (deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * exp (I * Œ∏ t))
-/

def CircleImmersion.lift {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥) : ‚Ñù ‚Üí ‚Ñù := sorry

lemma lift_exists {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥) :
  ‚àÉ Œ∏ : ‚Ñù ‚Üí ‚Ñù, (Œ∏ = CircleImmersion.lift imm_Œ≥) ‚àß (ContDiff ‚Ñù ‚ä§ Œ∏) ‚àß (‚àÄ (t : ‚Ñù), (deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * exp (I * Œ∏ t))) := sorry

-- Lift unique?


variable {Œ≥ : ‚Ñù ‚Üí ‚ÑÇ} (imm_Œ≥ : CircleImmersion Œ≥)

axiom CircleImmersion.contDiff_lift : ContDiff ‚Ñù ‚ä§ imm_Œ≥.lift

axiom CircleImmersion.deriv_eq (t : ‚Ñù) : deriv Œ≥ t = ‚Äñderiv Œ≥ t‚Äñ * Complex.exp (I * imm_Œ≥.lift t)

noncomputable def CircleImmersion.turningNumber := (imm_Œ≥.lift 1 - imm_Œ≥.lift 0) / (2 * œÄ)

structure HtpyCircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ) : Prop where
  diff : ContDiff ‚Ñù ‚ä§ (uncurry Œ≥)
  imm : ‚àÄ s, CircleImmersion (Œ≥ s)


/-
‚àÄK‚ÇÅ, K‚ÇÇ, K‚ÇÉ : ‚Ñù, with K‚ÇÅ > 0, and ‚àÄH > 0, we claim that  there exists some N‚ÇÄ such that N ‚â• N‚ÇÄ
implies that K‚ÇÅHN - K‚ÇÇH - K‚ÇÉ > 0

This is required to construct our gamma function and for the main phase.
-/

lemma root_lemma_maybe {K‚ÇÅ K‚ÇÇ K‚ÇÉ: ‚Ñù} (K‚ÇÅ_pos : K‚ÇÅ > 0) (H_pos : H > 0) : ‚àÉ (N‚ÇÄ : ‚Ñï), ‚àÄ N > N‚ÇÄ, (K‚ÇÅ * H) * N - (K‚ÇÇ * H + K‚ÇÉ) > 0 := by
  let K‚ÇÅH_pos := Real.mul_pos K‚ÇÅ_pos H_pos
  /- Claim that N‚ÇÄ = max (‚åä(K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1‚åã) (0)

  Note that:
  N‚ÇÄ > (K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H)
  ‚Üî K‚ÇÅ*HN > K‚ÇÉ + K‚ÇÇ * H
  ‚Üî  K‚ÇÅ*HN - K‚ÇÇ * H -  K‚ÇÉ > 0
  -/
  let N‚ÇÄ := Nat.floor (max ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) (0) )
  use N‚ÇÄ
  intro N hN

  have apply_floor_lt :=
    (Nat.floor_lt (le_max_right ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) 0)).1 (gt_iff_lt.1 hN)

  have context: (K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1 ‚â§ max ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) 0 := by
    exact le_max_left ((K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) + 1) 0

  have final: (K‚ÇÉ + K‚ÇÇ * H) / (K‚ÇÅ * H) < N := by linarith
  have final2: (K‚ÇÉ + K‚ÇÇ * H) < (K‚ÇÅ * H) * N  := by exact (div_lt_iff' K‚ÇÅH_pos).mp final
  linarith

namespace WhitneyGraustein

@[reducible] def unit : Set ‚Ñù := Set.Icc 0 1
@[reducible] def ruffling : Set ‚Ñù := Set.Icc 0 (1/4:‚Ñù)
@[reducible] def unruffling : Set ‚Ñù := Set.Icc (3/4:‚Ñù) 1
@[reducible] def main : Set ‚Ñù := Set.Icc (1/4:‚Ñù) (3/4:‚Ñù)
@[reducible] def antimain : Set ‚Ñù := (Set.Iic 0) ‚à™ (Set.Ici 1)

lemma ruffling_closed : IsClosed (Set.Icc 0 (1/4:‚Ñù)) := isClosed_Icc
lemma unruffling_closed : IsClosed (Set.Icc (3/4:‚Ñù) 1) := isClosed_Icc
lemma main_closed : IsClosed (Set.Icc (1/4:‚Ñù) (3/4:‚Ñù)) := isClosed_Icc

lemma ruffling_unruffling_disjoint : Disjoint ruffling unruffling := by
  intro S hS hS'
  by_contra opp
  push_neg at opp

  rcases (not_forall_not.mp opp) with ‚ü®x,hx‚ü©
  specialize hS hx
  specialize hS' hx
  rcases hS with ‚ü®_,B‚ü©
  rcases hS' with ‚ü®C,_‚ü©
  have fact : (1/4:‚Ñù) < (3/4:‚Ñù) := by norm_num
  have fact2 : x < (3/4:‚Ñù)  := LE.le.trans_lt B fact
  linarith

lemma main_antimain_disjoint : Disjoint main antimain := by
  intro S hS hS'
  by_contra opp
  push_neg at opp

  rcases (not_forall_not.mp opp) with ‚ü®x,hx‚ü©
  specialize hS hx
  specialize hS' hx
  rcases hS with ‚ü®A,B‚ü©
  rcases hS' with C|D

  simp at C
  linarith
  simp at D
  linarith

lemma triangle' {A B : ‚ÑÇ} : ‚ÄñB‚Äñ ‚â§ ‚ÄñA + B‚Äñ + ‚ÄñA‚Äñ := by
  have fact := norm_add_le (A+B) (-A)
  simp at fact
  exact fact

lemma triangle {A B : ‚ÑÇ} : ‚ÄñB‚Äñ - ‚ÄñA‚Äñ ‚â§ ‚ÄñA + B‚Äñ :=
  tsub_le_iff_right.mpr triangle'

lemma in_particular {A B C : ‚ÑÇ} : ‚ÄñC‚Äñ - ‚ÄñB‚Äñ - ‚ÄñA‚Äñ ‚â§ ‚ÄñA + B + C‚Äñ :=
  calc
    ‚ÄñC‚Äñ - ‚ÄñB‚Äñ - ‚ÄñA‚Äñ ‚â§ ‚ÄñB + C‚Äñ - ‚ÄñA‚Äñ := sub_le_sub_right triangle ‚ÄñA‚Äñ
    _ ‚â§ ‚ÄñA + (B + C)‚Äñ := triangle
    _ = ‚ÄñA + B + C‚Äñ := congrArg Norm.norm (add_assoc A B C).symm

theorem whitney_graustein {Œ≥‚ÇÄ Œ≥‚ÇÅ : ‚Ñù ‚Üí ‚ÑÇ} {t : ‚Ñù} (imm_Œ≥‚ÇÄ : CircleImmersion Œ≥‚ÇÄ) (imm_Œ≥‚ÇÅ : CircleImmersion Œ≥‚ÇÅ) :
  (imm_Œ≥‚ÇÄ.turningNumber = imm_Œ≥‚ÇÅ.turningNumber) ‚Üí ‚àÉ (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ), HtpyCircleImmersion Œ≥ ‚àß (Œ≥ 0 = Œ≥‚ÇÄ ‚àß Œ≥ 1 = Œ≥‚ÇÅ) := by
  intro hyp --we want to show that since there exists some N,H pair such that... then there exists...
  -- get that unit is closed, and two disjoint closed subintervals "ruffling" and "unruffling"


  --The below lemmas depend on here: https://github.com/leanprover-community/sphere-eversion/blob/master/SphereEversion/ToMathlib/Analysis/CutOff.lean
  have cutoff_exists : ‚àÉ œÅ : ‚Ñù ‚Üí ‚Ñù, ContDiff ‚Ñù ‚ä§ œÅ ‚àß EqOn œÅ 0 ruffling ‚àß EqOn œÅ 1 unruffling ‚àß ‚àÄ x, œÅ x ‚àà Icc (0 : ‚Ñù) 1 := sorry--exists_contDiff_zero_one (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t)
  rcases cutoff_exists with ‚ü®œÅ, hœÅ‚ü©
  have fact : ‚àÉ (H : ‚Ñù), H > 0 := Exists.intro 1 Real.zero_lt_one
  rcases fact with ‚ü®H, hH‚ü©
  have bump_exists : ‚àÉ h : ‚Ñù ‚Üí ‚Ñù, ContDiff ‚Ñù ‚ä§ h ‚àß (‚àÄ·∂† x in ùìùÀ¢ main, h x = 0) ‚àß (‚àÄ·∂† x in ùìùÀ¢ antimain, h x = H) ‚àß ‚àÄ x, h x ‚àà Icc (0 : ‚Ñù) 1 := sorry--exists_contDiff_zero_one_nhds (hs : IsClosed s) (ht : IsClosed t) (hd : Disjoint s t)
  rcases bump_exists with ‚ü®h, hh‚ü©

  rcases (lift_exists imm_Œ≥‚ÇÄ) with ‚ü®(Œ∏‚ÇÄ : ‚Ñù ‚Üí ‚Ñù), hŒ∏‚ÇÄ_lift_is_lift, hŒ∏‚ÇÄ_diff, hŒ∏‚ÇÄ_decomp‚ü©
  rcases (lift_exists imm_Œ≥‚ÇÅ) with ‚ü®(Œ∏‚ÇÅ : ‚Ñù ‚Üí ‚Ñù), hŒ∏‚ÇÅ_lift_is_lift, hŒ∏‚ÇÅ_diff, hŒ∏‚ÇÅ_decomp‚ü©

  have fact {A : ‚ÑÇ} : 0 = A + (-A) := by norm_num

  -- have critical : ‚àÄ K‚ÇÅ > 0, ‚àÄ H > 0, ‚àÄ N ‚â• N‚ÇÄ , ‚àÄ s, ‚àÄ t, ‚Äñderiv (Œ≥ s) t‚Äñ ‚â• (K‚ÇÅ s) * N * H - (K‚ÇÇ s) * H - (K‚ÇÉ s)
    --when we get to this part, we will need ‚ÄñA + B‚Äñ ‚â• ‚ÄñA‚Äñ - ‚ÄñB‚Äñ; this comes from the triangle inequality: ‚ÄñA‚Äñ + ‚ÄñB‚Äñ ‚â• ‚ÄñA + B‚Äñ (defined for normed groups as norm_mul_le')
      --‚ÄñA + B‚Äñ + ‚ÄñB‚Äñ = ‚ÄñA + B‚Äñ + ‚Äñ-B‚Äñ ‚â• ‚Äñ(A + B) + (-B)‚Äñ = ‚ÄñA‚Äñ, so ‚ÄñA + B‚Äñ + ‚ÄñB‚Äñ ‚â• ‚ÄñA‚Äñ, so ‚ÄñA + B‚Äñ ‚â• ‚ÄñA‚Äñ + ‚ÄñB‚Äñ
    --from this, ‚ÄñA + B + C‚Äñ ‚â• ‚ÄñA‚Äñ - ‚ÄñB‚Äñ - ‚ÄñC‚Äñ (or some rearrangement thereof)
  -- fix Œ≥‚ÇÄ, Œ≥‚ÇÅ, and œÅ
  -- ‚àÄ H > 0, ‚àÉ N‚ÇÄ, ‚àÄ N ‚â• N‚ÇÄ, K‚ÇÅ * N * H - K‚ÇÇ * H - K‚ÇÉ > 0
  -- need that ‚àÄ s, Œ≥ s is an immersed circle (of t) (and of course, Œ≥ 0 = Œ≥‚ÇÄ and same for 1)
  -- the extreme value theorem on (1-œÅ(s)) * Œ≥‚ÇÄ(t) + œÅ(s) * Œ≥‚ÇÅ(t) provides some maximum independent of N and H that we call K‚ÇÉ

  let œù := fun s t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
  let (Œ∏ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚Ñù) := fun s t ‚Ü¶ (1 - (œÅ s)) * (Œ∏‚ÇÄ t) + (œÅ s) * (Œ∏‚ÇÅ t)

  let (R : ‚Ñù ‚Üí ‚ÑÇ) := fun Œ∏ ‚Ü¶ exp (I * (Œ∏ : ‚Ñù))
  let ruffle : ‚Ñù ‚Üí ‚ÑÇ := fun t ‚Ü¶ -Real.sin (4 * œÄ * t) + I * 2 * Real.sin (2 * œÄ * t)

  let unit_compact : IsCompact unit := isCompact_Icc
  let unit_nonempty : Set.Nonempty unit := nonempty_of_nonempty_subtype
  let normA := fun s t ‚Ü¶ ‚Äñderiv (œù s) t‚Äñ
  have cont : Continuous (uncurry normA) := by

    have fact1 : Continuous (uncurry (fun s t ‚Ü¶ deriv (œù s) t)) := by


      have CDŒ≥‚ÇÄ := (contDiff_top_iff_deriv.1 (imm_Œ≥‚ÇÄ.diff)).2
      have CDŒ≥‚ÇÅ := (contDiff_top_iff_deriv.1 (imm_Œ≥‚ÇÅ.diff)).2

      have CDœÅ := (contDiff_top_iff_deriv.1 (hœÅ.1)).2



      let inter‚ÇÉ := fun s t ‚Ü¶  (1 - (œÅ s)) * (deriv Œ≥‚ÇÄ t) + (œÅ s) * deriv Œ≥‚ÇÅ t
      have exact_derivative : ‚àÄ s, inter‚ÇÉ s = deriv (œù s) := by
        intro s
        simp only
        have duh : ‚àÄx, deriv (fun t ‚Ü¶ (1 - ‚Üë(œÅ s)) * Œ≥‚ÇÄ t + ‚Üë(œÅ s) * Œ≥‚ÇÅ t) x = deriv (fun t ‚Ü¶ (1 - ‚Üë(œÅ s)) * Œ≥‚ÇÄ t) x + deriv (fun t ‚Ü¶ ‚Üë(œÅ s) * Œ≥‚ÇÅ t) x := by
          intro x
          have f1 : DifferentiableAt ‚Ñù (fun t ‚Ü¶ (1 - ‚Üë(œÅ s)) * Œ≥‚ÇÄ t) x := by
            have diff_Œ≥‚ÇÄ:= CDŒ≥‚ÇÄ.differentiable (OrderTop.le_top (1:‚Ñï‚àû))
            --have diff_œÅ:= CDœÅ.differentiable (OrderTop.le_top (1:‚Ñï‚àû))


            have diff_final : Differentiable ‚Ñù (fun t ‚Ü¶ (1 - ‚Üë(œÅ s)) * Œ≥‚ÇÄ t) := by
              sorry







          --have f2 : DifferentiableAt ‚Ñù (fun t ‚Ü¶ ‚Üë(œÅ s) * Œ≥‚ÇÅ t) x :=





      /-How to show that deriv (œù s) = fun t ‚Ü¶  (1 - (œÅ s)) * (deriv Œ≥‚ÇÄ t) + (œÅ s) * deriv Œ≥‚ÇÅ t -/


      /-Needs to use continuity facts of products and sums...-/







    have fact2 := Continuous.norm fact1
    have fact3 : (fun x ‚Ü¶ ‚Äñuncurry (fun s t ‚Ü¶ deriv (œù s) t) x‚Äñ) = uncurry normA := by
      simp only
      exact rfl

    rw [‚Üê fact3]
    exact fact2









  rcases (unit_compact.prod unit_compact).exists_isMinOn (unit_nonempty.prod unit_nonempty) cont.continuousOn with
    ‚ü®‚ü®s‚ÇÉ, t‚ÇÉ‚ü©, ‚ü®s‚ÇÉin : s‚ÇÉ ‚àà unit, t‚ÇÉin : t‚ÇÉ ‚àà unit‚ü©, hst‚ÇÉ‚ü©
  let K‚ÇÉ := normA s‚ÇÉ t‚ÇÉ

  let (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ) := fun s t ‚Ü¶ œù s t + (h s) * (R (Œ∏ s t)) * ruffle (N * t)
  use Œ≥
  constructor
  --these statements will likely need to be proved out of order, probably starting with the statement of derive_ne
  ¬∑ sorry

  --HtpyCircleImmersion (Œ≥ : ‚Ñù ‚Üí ‚Ñù ‚Üí ‚ÑÇ)
    --requires diff : ContDiff ‚Ñù ‚ä§ (uncurry Œ≥)
      --should fall out of some composition stuff
    -- requires imm : ‚àÄ s, CircleImmersion (Œ≥ s)
      --requires diff : ContDiff ‚Ñù ‚ä§ (Œ≥ s)
      --requires per : Periodic (Œ≥ s) 1
        --requires ‚àÄ t, (Œ≥ s) (t + 1) = (Œ≥ s) t
          --(œù s) := fun t ‚Ü¶ t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
          --(Œ∏ s) := t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t
          --(Œ≥ s) := fun t ‚Ü¶ (œù s) t + (h s) * (R ((Œ∏ s) t)) * ruffling (N * t)
          --       = fun t ‚Ü¶ (fun t ‚Ü¶ t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t) t + (h s) * (R ((t ‚Ü¶ (1 - (œÅ s)) * (Œ≥‚ÇÄ t) + (œÅ s) * Œ≥‚ÇÅ t) t)) * ruffle (N * t)
          --       = ...
      --requires derive_ne : ‚àÄ t, deriv Œ≥ t ‚â† 0
        --big thing here
        --do we need a lemma (hopefully something similar in mathlib or otherwise eliminative of the issue of separating into "phases"):
          --for all a c : ‚Ñù for all Œ≥ ContDiff on [a, c], for all b with a < b < c, if deriv Œ≥ t ‚â† 0 on (a, b) and deriv Œ≥ t ‚â† 0 on (b, c) and deriv Œ≥ b ‚â† 0, then deriv Œ≥ t ‚â† 0 on (a, b)
            --or some other lemma that relates extrema on two intervals to extrema on their union (or otherwise to that effect)
          --NOTE that the deriv Œ≥ b condition can be substituted for being monotonic on some neighborhood of b,
            --which if we take for granted, could make handling the cutoff nice if we just assert it is entirely nondecreasing (or maybe im tripping)
        --do we want to prove this with explicit values for the given R and ruffle (and h and œÅ) (anything else?) first or do we want to prove the more general statements of their existence
        --for a given s, K‚ÇÅ = min of the norm of the thing with h and N in it
          --exists cuz norm has clear lower bound 0, show that this in particular is nonzero because the terms are nonnegative and are never simultaneously zero
        --for a given s, K‚ÇÇ = max(‚Äñh * deriv (Œ∏ s) * R * ruffle‚Äñ) on s, t ‚àà [0, 1]
          --exists since everything is bounded
        --for a given s, K‚ÇÉ = max(‚Äñ(1 - œÅ s) * (Œ≥‚ÇÄ t) + (œÅ s) * (Œ≥‚ÇÅ t)‚Äñ) on s, t ‚àà [0, 1]
          --exists since (œÅ s) and Œ≥‚ÇÄ and Œ≥‚ÇÅ are all bounded on the period, etc or whatever
        --using root_lemma_maybe (or whatever it renamed to), get N‚ÇÄ and define Œ≥, carry out some triangle inequality argument showing that ‚àÄ s, ‚Äñderiv (Œ≥ s) t‚Äñ > 0, and hence nonzero.
  ¬∑ constructor
    ¬∑ sorry --Œ≥ 0 = Œ≥‚ÇÄ
    ¬∑ sorry --Œ≥ 1 = Œ≥‚ÇÅ

--Maybe of note: exp (I * h.lift t) is a local homeomorphism

end WhitneyGraustein
